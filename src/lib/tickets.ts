export type TicketStatus = "active" | "redeemed" | "expired";

export type Ticket = {
  id: string;
  orderId?: string;
  paymentId?: string;
  eventName?: string;
  eventDateISO?: string; // ISO date string
  expiresAtISO?: string; // ISO date string
  status: TicketStatus;
  qrImageUrl: string; // URL or data URI generated by backend
  scannedAtISO?: string;
  people?: number;
  p1?: number;
  p2?: number;
};

const API_BASE = import.meta.env.VITE_API_BASE_URL || "";

export async function fetchTicketById(ticketId: string): Promise<Ticket> {
  const res = await fetch(`${API_BASE}/api/tickets/${encodeURIComponent(ticketId)}`);
  if (!res.ok) throw new Error(`Failed to fetch ticket: ${res.status}`);
  return (await res.json()) as Ticket;
}

export async function lookupTicket(params: { orderId?: string; paymentId?: string }): Promise<Ticket> {
  const q = new URLSearchParams();
  if (params.orderId) q.set("orderId", params.orderId);
  if (params.paymentId) q.set("paymentId", params.paymentId);
  const res = await fetch(`${API_BASE}/api/tickets/lookup?${q.toString()}`);
  if (!res.ok) throw new Error(`Failed to lookup ticket: ${res.status}`);
  return (await res.json()) as Ticket;
}

export function isExpired(ticket: Ticket): boolean {
  const now = Date.now();
  const exp = ticket.expiresAtISO ? Date.parse(ticket.expiresAtISO) : undefined;
  const evt = ticket.eventDateISO ? Date.parse(ticket.eventDateISO) : undefined;
  const minExpiry = [exp, evt].filter(Boolean) as number[];
  if (minExpiry.length === 0) return ticket.status === "expired";
  return now > Math.min(...minExpiry) || ticket.status === "expired";
}
